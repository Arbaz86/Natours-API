{
    "mappings": "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",
    "sources": [
        "public/js/index.js",
        "public/js/login.js",
        "public/js/alert.js",
        "public/js/updateSettings.js"
    ],
    "sourcesContent": [
        "import { login, logout } from \"./login\";\r\nimport { updateSettings } from \"./updateSettings\";\r\n\r\n// Selecting the form element using its class name\r\nconst loginForm = document.querySelector(\".form--login\");\r\nconst logOutBtn = document.querySelector(\".nav__el--logout\");\r\nconst userDataForm = document.querySelector(\".form-user-data\");\r\nconst userPasswordForm = document.querySelector(\".form-user-password\");\r\n\r\nif (loginForm) {\r\n  // Adding an event listener to the form for the submit event\r\n  loginForm.addEventListener(\"submit\", (e) => {\r\n    // Preventing the default form submission behavior\r\n    e.preventDefault();\r\n\r\n    // Getting the email and password values from the form inputs\r\n    let email = loginForm.email.value;\r\n    let password = loginForm.password.value;\r\n\r\n    // Calling the login function with email and password values\r\n    login(email, password);\r\n  });\r\n}\r\n\r\nif (logOutBtn) logOutBtn.addEventListener(\"click\", logout);\r\n\r\nif (userDataForm) {\r\n  userDataForm.addEventListener(\"submit\", async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Getting the name and email values from the form inputs\r\n    let name = userDataForm.name.value;\r\n    let email = userDataForm.email.value;\r\n\r\n    // Calling the updateData function with name and email values\r\n    await updateSettings({ name, email }, \"data\");\r\n  });\r\n}\r\nif (userPasswordForm) {\r\n  userPasswordForm.addEventListener(\"submit\", async (e) => {\r\n    e.preventDefault();\r\n    document.querySelector(\".btn--save-password\").innerHTML = \"Updating...\";\r\n\r\n    // Getting the password-current, password and password-confirm values from the form inputs\r\n    let passwordCurrent = userPasswordForm[\"password-current\"].value;\r\n    let password = userPasswordForm[\"password\"].value;\r\n    let passwordConfirm = userPasswordForm[\"password-confirm\"].value;\r\n\r\n    // Calling the updateData function with password-current, password and password-confirm values\r\n    await updateSettings(\r\n      { passwordCurrent, password, passwordConfirm },\r\n      \"password\"\r\n    );\r\n\r\n    document.querySelector(\".btn--save-password\").innerHTML = \"Save Password\";\r\n\r\n    passwordCurrent = userPasswordForm[\"password-current\"].value = \"\";\r\n    password = userPasswordForm[\"password\"].value = \"\";\r\n    passwordConfirm = userPasswordForm[\"password-confirm\"].value = \"\";\r\n  });\r\n}\r\n",
        "import { showAlert } from \"./alert\";\r\n\r\n// Defining a function to handle login\r\nexport const login = async (email, password) => {\r\n  // Logging the email and password to the console\r\n  console.log({ email, password });\r\n\r\n  try {\r\n    // Sending a POST request to the login endpoint with email and password in the request body\r\n    const res = await fetch(\r\n      \"https://natours-api-z82r.onrender.com/api/v1/users/login\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email,\r\n          password,\r\n        }),\r\n      }\r\n    );\r\n\r\n    // Parsing the response data\r\n    let data = await res.json();\r\n\r\n    // Logging the response data to the console\r\n    console.log(data);\r\n\r\n    // Showing an alert message if the login was successful and redirecting to the home page\r\n    if (data.status === \"success\") {\r\n      showAlert(\"success\", \"Logged in Successfully!\");\r\n\r\n      setTimeout(() => {\r\n        location.assign(\"/\");\r\n      }, 1500);\r\n    } else {\r\n      // Showing an alert message with the error message if the login failed\r\n      showAlert(\"error\", data.message);\r\n    }\r\n  } catch (error) {\r\n    // Showing an alert message with the error message if there was an error while sending the request\r\n    showAlert(\"error\", error.message);\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const logout = async () => {\r\n  try {\r\n    const res = await fetch(\r\n      \"https://natours-api-z82r.onrender.com/api/v1/users/logout\"\r\n    );\r\n    const data = await res.json();\r\n\r\n    console.log(data);\r\n\r\n    if (data.status === \"success\") {\r\n      showAlert(\"success\", \"Logged Out Successfully!\");\r\n      location.reload();\r\n    }\r\n  } catch (error) {\r\n    showAlert(\"error\", \"Error logging out! Try again.\");\r\n  }\r\n};\r\n",
        "export const hideAlert = () => {\r\n  const el = document.querySelector(\".alert\");\r\n  if (el) el.parentElement.removeChild(el);\r\n};\r\n\r\n// type is 'success' or 'error'\r\nexport const showAlert = (type, message) => {\r\n  hideAlert();\r\n  const markup = `<div class=\"alert alert--${type}\" >${message}</div>`;\r\n  document.querySelector(\"body\").insertAdjacentHTML(\"afterbegin\", markup);\r\n\r\n  setTimeout(() => {\r\n    hideAlert();\r\n  }, 5000);\r\n};\r\n",
        "import { showAlert } from \"./alert\";\r\n\r\nexport const updateSettings = async (data, type) => {\r\n  console.log({ data, type });\r\n  try {\r\n    const endpoint = type === \"password\" ? \"updateMyPassword\" : \"updateMe\";\r\n\r\n    const res = await fetch(\r\n      `https://natours-api-z82r.onrender.com/api/v1/users/${endpoint}`,\r\n      {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      }\r\n    );\r\n\r\n    const resData = await res.json();\r\n\r\n    // Showing an alert message if the login was successful and redirecting to the home page\r\n    if (resData.status === \"success\") {\r\n      showAlert(\"success\", `${type.toUpperCase()} Updated Successfully!`);\r\n    } else {\r\n      // Showing an alert message with the error message if the login failed\r\n      showAlert(\"error\", resData.message);\r\n    }\r\n  } catch (error) {\r\n    showAlert(\"error\", error.message);\r\n  }\r\n};\r\n"
    ],
    "names": [],
    "version": 3,
    "file": "bundle.js.map",
    "sourceRoot": "../../"
}